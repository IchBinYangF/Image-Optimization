"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageOptimizationStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const my_custom_resource_1 = require("./my-custom-resource");
const crypto_1 = require("crypto");
// Region to Origin Shield mapping based on latency. to be updated when new Regional Edge Caches are added to CloudFront.
const ORIGIN_SHIELD_MAPPING = new Map([['af-south-1', 'eu-west-2'], ['ap-east-1', 'ap-northeast-2'], ['ap-northeast-1', 'ap-northeast-1'], [
        'ap-northeast-2', 'ap-northeast-2'
    ], ['ap-northeast-3', 'ap-northeast-1'], ['ap-south-1', 'ap-south-1'], ['ap-southeast-1', 'ap-southeast-1'], [
        'ap-southeast-2', 'ap-southeast-2'
    ], ['ca-central-1', 'us-east-1'], ['eu-central-1', 'eu-central-1'], ['eu-north-1', 'eu-central-1'], [
        'eu-south-1', 'eu-central-1'
    ], ['eu-west-1', 'eu-west-1'], ['eu-west-2', 'eu-west-2'], ['eu-west-3', 'eu-west-2'], ['me-south-1', 'ap-south-1'], [
        'sa-east-1', 'sa-east-1'
    ], ['us-east-1', 'us-east-1'], ['us-east-2', 'us-east-2'], ['us-west-1', 'us-west-1'], ['us-west-2', 'us-west-2']]);
// Stack Parameters
// related to architecture. If set to false, transformed images are not stored in S3, and all image requests land on Lambda
var STORE_TRANSFORMED_IMAGES = 'true';
// Parameters of S3 bucket where original images are stored
var S3_IMAGE_BUCKET_NAME;
// CloudFront parameters
var CLOUDFRONT_ORIGIN_SHIELD_REGION = ORIGIN_SHIELD_MAPPING.get(process.env.AWS_REGION || process.env.CDK_DEFAULT_REGION || 'us-east-1');
var CLOUDFRONT_CORS_ENABLED = 'true';
// Parameters of transformed images
var S3_TRANSFORMED_IMAGE_EXPIRATION_DURATION = '90';
var S3_TRANSFORMED_IMAGE_CACHE_TTL = 'max-age=31622400';
// Lambda Parameters
var LAMBDA_MEMORY = '1500';
var LAMBDA_TIMEOUT = '60';
var LOG_TIMING = 'false';
class ImageOptimizationStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        var _a;
        super(scope, id, props);
        // Change stack parameters based on provided context
        STORE_TRANSFORMED_IMAGES = this.node.tryGetContext('STORE_TRANSFORMED_IMAGES') || STORE_TRANSFORMED_IMAGES;
        S3_TRANSFORMED_IMAGE_EXPIRATION_DURATION = this.node.tryGetContext('S3_TRANSFORMED_IMAGE_EXPIRATION_DURATION') || S3_TRANSFORMED_IMAGE_EXPIRATION_DURATION;
        S3_TRANSFORMED_IMAGE_CACHE_TTL = this.node.tryGetContext('S3_TRANSFORMED_IMAGE_CACHE_TTL') || S3_TRANSFORMED_IMAGE_CACHE_TTL;
        S3_IMAGE_BUCKET_NAME = this.node.tryGetContext('S3_IMAGE_BUCKET_NAME') || S3_IMAGE_BUCKET_NAME;
        CLOUDFRONT_ORIGIN_SHIELD_REGION = this.node.tryGetContext('CLOUDFRONT_ORIGIN_SHIELD_REGION') || CLOUDFRONT_ORIGIN_SHIELD_REGION;
        CLOUDFRONT_CORS_ENABLED = this.node.tryGetContext('CLOUDFRONT_CORS_ENABLED') || CLOUDFRONT_CORS_ENABLED;
        LAMBDA_MEMORY = this.node.tryGetContext('LAMBDA_MEMORY') || LAMBDA_MEMORY;
        LAMBDA_TIMEOUT = this.node.tryGetContext('LAMBDA_TIMEOUT') || LAMBDA_TIMEOUT;
        LOG_TIMING = this.node.tryGetContext('LOG_TIMING') || LOG_TIMING;
        // Create secret key to be used between CloudFront and Lambda URL for access control
        const SECRET_KEY = (0, crypto_1.createHash)('md5').update(this.node.addr).digest('hex');
        // For the bucket having original images, either use an external one, or create one with some samples photos.
        var originalImageBucket;
        var transformedImageBucket;
        var sampleWebsiteDelivery;
        if (S3_IMAGE_BUCKET_NAME) {
            originalImageBucket = aws_cdk_lib_1.aws_s3.Bucket.fromBucketName(this, 'imported-original-image-bucket', S3_IMAGE_BUCKET_NAME);
            new aws_cdk_lib_1.CfnOutput(this, 'OriginalImagesS3Bucket', {
                description: 'S3 bucket where original images are stored',
                value: originalImageBucket.bucketName
            });
        }
        else {
            originalImageBucket = new aws_cdk_lib_1.aws_s3.Bucket(this, 's3-sample-original-image-bucket', {
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                blockPublicAccess: aws_cdk_lib_1.aws_s3.BlockPublicAccess.BLOCK_ALL,
                encryption: aws_cdk_lib_1.aws_s3.BucketEncryption.S3_MANAGED,
                enforceSSL: true,
                autoDeleteObjects: true,
            });
            new aws_cdk_lib_1.aws_s3_deployment.BucketDeployment(this, 'DeployWebsite', {
                sources: [aws_cdk_lib_1.aws_s3_deployment.Source.asset('./image-sample')],
                destinationBucket: originalImageBucket,
                destinationKeyPrefix: 'images/rio/',
            });
            var sampleWebsiteBucket = new aws_cdk_lib_1.aws_s3.Bucket(this, 's3-sample-website-bucket', {
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                blockPublicAccess: aws_cdk_lib_1.aws_s3.BlockPublicAccess.BLOCK_ALL,
                encryption: aws_cdk_lib_1.aws_s3.BucketEncryption.S3_MANAGED,
                enforceSSL: true,
                autoDeleteObjects: true,
            });
            sampleWebsiteDelivery = new aws_cdk_lib_1.aws_cloudfront.Distribution(this, 'websiteDeliveryDistribution', {
                comment: 'image optimization - sample website',
                defaultRootObject: 'index.html',
                defaultBehavior: {
                    origin: new aws_cdk_lib_1.aws_cloudfront_origins.S3Origin(sampleWebsiteBucket),
                    viewerProtocolPolicy: aws_cdk_lib_1.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                }
            });
            new aws_cdk_lib_1.CfnOutput(this, 'SampleWebsiteDomain', {
                description: 'Sample website domain',
                value: sampleWebsiteDelivery.distributionDomainName
            });
            new aws_cdk_lib_1.CfnOutput(this, 'SampleWebsiteS3Bucket', {
                description: 'S3 bucket use by the sample website',
                value: sampleWebsiteBucket.bucketName
            });
            new aws_cdk_lib_1.CfnOutput(this, 'OriginalImagesS3Bucket', {
                description: 'S3 bucket where original images are stored',
                value: originalImageBucket.bucketName
            });
        }
        // create bucket for transformed images if enabled in the architecture
        if (STORE_TRANSFORMED_IMAGES === 'true') {
            transformedImageBucket = new aws_cdk_lib_1.aws_s3.Bucket(this, 's3-transformed-image-bucket', {
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
                autoDeleteObjects: true,
                lifecycleRules: [
                    {
                        expiration: aws_cdk_lib_1.Duration.days(parseInt(S3_TRANSFORMED_IMAGE_EXPIRATION_DURATION)),
                    },
                ],
            });
        }
        // prepare env variable for Lambda 
        var lambdaEnv = {
            originalImageBucketName: originalImageBucket.bucketName,
            transformedImageCacheTTL: S3_TRANSFORMED_IMAGE_CACHE_TTL,
            secretKey: SECRET_KEY,
            logTiming: LOG_TIMING,
        };
        if (transformedImageBucket)
            lambdaEnv.transformedImageBucketName = transformedImageBucket.bucketName;
        // IAM policy to read from the S3 bucket containing the original images
        const s3ReadOriginalImagesPolicy = new aws_cdk_lib_1.aws_iam.PolicyStatement({
            actions: ['s3:GetObject'],
            resources: ['arn:aws:s3:::' + originalImageBucket.bucketName + '/*'],
        });
        // statements of the IAM policy to attach to Lambda
        var iamPolicyStatements = [s3ReadOriginalImagesPolicy];
        // Create Lambda for image processing
        var lambdaProps = {
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.NODEJS_16_X,
            handler: 'index.handler',
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset('functions/image-processing'),
            timeout: aws_cdk_lib_1.Duration.seconds(parseInt(LAMBDA_TIMEOUT)),
            memorySize: parseInt(LAMBDA_MEMORY),
            environment: lambdaEnv,
            logRetention: aws_cdk_lib_1.aws_logs.RetentionDays.ONE_DAY,
        };
        var imageProcessing = new aws_cdk_lib_1.aws_lambda.Function(this, 'image-optimization', lambdaProps);
        // Enable Lambda URL
        const imageProcessingURL = imageProcessing.addFunctionUrl({
            authType: aws_cdk_lib_1.aws_lambda.FunctionUrlAuthType.NONE,
        });
        // Leverage a custom resource to get the hostname of the LambdaURL
        const imageProcessingHelper = new my_custom_resource_1.MyCustomResource(this, 'customResource', {
            Url: imageProcessingURL.url
        });
        // Create a CloudFront origin: S3 with fallback to Lambda when image needs to be transformed, otherwise with Lambda as sole origin
        var imageOrigin;
        if (transformedImageBucket) {
            imageOrigin = new aws_cdk_lib_1.aws_cloudfront_origins.OriginGroup({
                primaryOrigin: new aws_cdk_lib_1.aws_cloudfront_origins.S3Origin(transformedImageBucket, {
                    originShieldRegion: CLOUDFRONT_ORIGIN_SHIELD_REGION,
                }),
                fallbackOrigin: new aws_cdk_lib_1.aws_cloudfront_origins.HttpOrigin(imageProcessingHelper.hostname, {
                    originShieldRegion: CLOUDFRONT_ORIGIN_SHIELD_REGION,
                    customHeaders: {
                        'x-origin-secret-header': SECRET_KEY,
                    },
                }),
                fallbackStatusCodes: [403],
            });
            // write policy for Lambda on the s3 bucket for transformed images
            var s3WriteTransformedImagesPolicy = new aws_cdk_lib_1.aws_iam.PolicyStatement({
                actions: ['s3:PutObject'],
                resources: ['arn:aws:s3:::' + transformedImageBucket.bucketName + '/*'],
            });
            iamPolicyStatements.push(s3WriteTransformedImagesPolicy);
        }
        else {
            console.log("else transformedImageBucket");
            imageOrigin = new aws_cdk_lib_1.aws_cloudfront_origins.HttpOrigin(imageProcessingHelper.hostname, {
                originShieldRegion: CLOUDFRONT_ORIGIN_SHIELD_REGION,
                customHeaders: {
                    'x-origin-secret-header': SECRET_KEY,
                },
            });
        }
        // attach iam policy to the role assumed by Lambda
        (_a = imageProcessing.role) === null || _a === void 0 ? void 0 : _a.attachInlinePolicy(new aws_cdk_lib_1.aws_iam.Policy(this, 'read-write-bucket-policy', {
            statements: iamPolicyStatements,
        }));
        // Create a CloudFront Function for url rewrites
        const urlRewriteFunction = new aws_cdk_lib_1.aws_cloudfront.Function(this, 'urlRewrite', {
            code: aws_cdk_lib_1.aws_cloudfront.FunctionCode.fromFile({ filePath: 'functions/url-rewrite/index.js', }),
            functionName: `urlRewriteFunction${this.node.addr}`,
        });
        var imageDeliveryCacheBehaviorConfig = {
            origin: imageOrigin,
            viewerProtocolPolicy: aws_cdk_lib_1.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            cachePolicy: new aws_cdk_lib_1.aws_cloudfront.CachePolicy(this, `ImageCachePolicy${this.node.addr}`, {
                defaultTtl: aws_cdk_lib_1.Duration.hours(24),
                maxTtl: aws_cdk_lib_1.Duration.days(365),
                minTtl: aws_cdk_lib_1.Duration.seconds(0),
                queryStringBehavior: aws_cdk_lib_1.aws_cloudfront.CacheQueryStringBehavior.all()
            }),
            functionAssociations: [{
                    eventType: aws_cdk_lib_1.aws_cloudfront.FunctionEventType.VIEWER_REQUEST,
                    function: urlRewriteFunction,
                }],
        };
        if (CLOUDFRONT_CORS_ENABLED === 'true') {
            // Creating a custom response headers policy. CORS allowed for all origins.
            const imageResponseHeadersPolicy = new aws_cdk_lib_1.aws_cloudfront.ResponseHeadersPolicy(this, `ResponseHeadersPolicy${this.node.addr}`, {
                responseHeadersPolicyName: 'ImageResponsePolicy',
                corsBehavior: {
                    accessControlAllowCredentials: false,
                    accessControlAllowHeaders: ['*'],
                    accessControlAllowMethods: ['GET'],
                    accessControlAllowOrigins: ['*'],
                    accessControlMaxAge: aws_cdk_lib_1.Duration.seconds(600),
                    originOverride: false,
                },
                // recognizing image requests that were processed by this solution
                customHeadersBehavior: {
                    customHeaders: [
                        { header: 'x-aws-image-optimization', value: 'v1.0', override: true },
                        { header: 'vary', value: 'accept', override: true },
                    ],
                }
            });
            imageDeliveryCacheBehaviorConfig.responseHeadersPolicy = imageResponseHeadersPolicy;
        }
        const imageDelivery = new aws_cdk_lib_1.aws_cloudfront.Distribution(this, 'imageDeliveryDistribution', {
            comment: 'image optimization - image delivery',
            defaultBehavior: imageDeliveryCacheBehaviorConfig
        });
        new aws_cdk_lib_1.CfnOutput(this, 'ImageDeliveryDomain', {
            description: 'Domain name of image delivery',
            value: imageDelivery.distributionDomainName
        });
    }
}
exports.ImageOptimizationStack = ImageOptimizationStack;
//# sourceMappingURL=data:application/json;base64,